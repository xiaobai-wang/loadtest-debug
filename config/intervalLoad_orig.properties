################################################################################
#
# Load Test Profile Configuration
#
# Define the load test cases to be run in parallel by the XLT agents.
#
# Format:
#
#   com.xceptance.xlt.loadtests.<testID>.<setting> = <value>
#
# For "<testID>" use any proper name. The supported values for "<setting>" are:
#
#   class ................. the test class name
#   users ................. the number of threads that run the test in parallel (REQUIRED)
#   iterations ............ the number of iterations per thread
#   arrivalRate ........... the number of transactions per hour
#   initialDelay .......... the number of seconds to wait at the beginning
#   warmUpPeriod .......... the number of seconds to run without performing measurements
#   measurementPeriod ..... the number of seconds to perform measurements (REQUIRED)
#   shutdownPeriod ........ the number of seconds to continue without performing measurements
#   rampUpInitialValue .... the initial value to start with when ramping up the load parameter
#   rampUpPeriod .......... the time period to steadily increase the load parameter
#   rampUpSteadyPeriod .... the time period between ramp-up steps
#   rampUpStepSize ........ the value to step-wise increase the load parameter during ramp-up
#   loadFactor ............ the factor to apply to users (and arrivalRate if defined)
#   clientPerformanceTest . whether this test should be run as client-side performance test
#
# The "arrivalRate" value influences the way the load is generated. If omitted,
# the system generates a constant load based on the number of concurrent users.
# If specified, the system generates load with a cluster-wide constant arrival
# rate. In the latter case, the maximum load is limited by the number of
# concurrent users. Note that an arrival rate is only supported for
# non-iteration based load tests.
#
# The following figure shows the relationship between the various settings:
#
#     : initialDelay :   warmUpPeriod   : measurementPeriod : shutdownPeriod :	
#     :              :                  :                   :                :
#     /\             :                  :                   :                :
#   L |              :                  :                   :                :
#   o |              :                  :                   :                :
#   a |              :                **************************************** 
#   d |              :            ****:
#     |              :        ****    :
#     |              :    ****        :
#     |              :****            :
#     +--------------*----------------------------------------------------------->
#     :              :                :                                      Time
#     : initialDelay :  rampUpPeriod  :
#
# The "warmUpPeriod" is the time we will give the load to level out before
# taking measurements, and it starts directly after the "initialDelay". This is
# done to minimize discrepancies that could be caused by applications and other
# systems starting up and not yet operating at an optimal level. Once this time
# has elapsed, the stable load will be measured during the "measurementPeriod".
# A "shutdownPeriod" can be set in which the users can orderly finish their last
# transaction.
#
# The "rampUpPeriod" setting is independent of the "warmUpPeriod", 
# "measurementPeriod", and "shutdownPeriod" settings and dictates the time that
# it will take for the load parameter to increase to 100% after the initial
# delay. As an alternative there is the "rampUpSteadyPeriod" that describes the
# period of a single step. The "rampUpPeriod" and the "rampUpSteadyPeriod" are 
# mutually exclusive. Note that the ramp-up settings are applied to the arrival
# rate load parameter if an arrival rate is specified, otherwise to the user 
# count load parameter.
#
# All time period values can be specified in one of the following formats:
#   - total number of seconds
#     examples: '1234s' or '1234'
#   - natural style
#     examples: '0h 12m 0s', '0h 12m', '12m 0s' or '12m'
#   - digit style
#     examples: '1:23', '01:23', '0:1:23' or '0:01:23' 
#
################################################################################

## The list of active test cases.
com.xceptance.xlt.loadtests = TAddToCart TBrowse TCheckout TGuestCheckout TGuestOrder TOrder TRegister TSearch 
#com.xceptance.xlt.loadtests = TVisit

# Optional extra test cases 
# TMultiThreadedPunch TGuestOrderWithMultipleCheckouts TSimpleURL TSingleProductOrder

## The default load test settings for all test cases. These global settings may
## be overridden by test case specific values. See below.
#com.xceptance.xlt.loadtests.default.rampUpPeriod = 15m
#com.xceptance.xlt.loadtests.default.measurementPeriod = 4h 15m
#com.xceptance.xlt.loadtests.default.shutdownPeriod = 5m

#com.xceptance.xlt.loadtests.default.rampUpPeriod = 10m
com.xceptance.xlt.loadtests.default.measurementPeriod = 150m
#com.xceptance.xlt.loadtests.default.shutdownPeriod = 2m

#com.xceptance.xlt.loadtests.default.rampUpPeriod = 1m
#com.xceptance.xlt.loadtests.default.measurementPeriod = 6m
#com.xceptance.xlt.loadtests.default.shutdownPeriod = 1m

#com.xceptance.xlt.loadtests.default.users = 5
#com.xceptance.xlt.loadtests.default.iterations = 100
#com.xceptance.xlt.loadtests.default.arrivalRate = 3600
#com.xceptance.xlt.loadtests.default.initialDelay = 0
#com.xceptance.xlt.loadtests.default.warmUpPeriod = 30s
#com.xceptance.xlt.loadtests.default.rampUpInitialValue = 1
#com.xceptance.xlt.loadtests.default.rampUpSteadyPeriod = 1s
#com.xceptance.xlt.loadtests.default.rampUpStepSize = 1
com.xceptance.xlt.loadtests.default.loadFactor = 1.0

# think time
com.xceptance.xlt.thinktime.action = 5000
com.xceptance.xlt.thinktime.action.deviation = 2000

#######################################################################################

## DW vertical scaling load testing --> 10k visits per hour with 2x load increasing intervals -- 10m ramp up per interval / 20m steady state per interval

# General Site Activity - 80% 10k vph  (8,000 vph)
# 20% abandoned checkouts  [1600 per hour with 50% Guest, 50% Registered]
# 15% abandoned carts  [1200 per hour]
# 30% browse  [2400 per hour]
# 30% search  [2400 per hour]
# 5% user registration [400 per hour]

# Conversion\Order Creation - 20% 10k vph  (2,000)
# 100% order creation [2000 per hour with 50% Guest, 50% Registered]

#######################################################################################

com.xceptance.xlt.loadtests.TAddToCart.users = 1000
com.xceptance.xlt.loadtests.TAddToCart.arrivalRate = 0m/0 10m/1200 30m/1200 40m/2400 60m/2400 70m/4800 90m/4800 100m/9600 120m/9600 130m/19200 150m/19200

com.xceptance.xlt.loadtests.TBrowse.users = 1000
com.xceptance.xlt.loadtests.TBrowse.arrivalRate = 0m/0 10m/2400 30m/2400 40m/4800 60m/4800 70m/9600 90m/9600 100m/19200 120m/19200 130m/38400 150m/38400

com.xceptance.xlt.loadtests.TCheckout.users = 1000
com.xceptance.xlt.loadtests.TCheckout.arrivalRate = 0m/0 10m/800 30m/800 40m/1600 60m/1600 70m/3200 90m/3200 100m/6400 120m/6400 130m/12800 150m/12800

com.xceptance.xlt.loadtests.TGuestCheckout.users = 1000
com.xceptance.xlt.loadtests.TGuestCheckout.arrivalRate = 0m/0 10m/800 30m/800 40m/1600 60m/1600 70m/3200 90m/3200 100m/6400 120m/6400 130m/12800 150m/12800

com.xceptance.xlt.loadtests.TGuestOrder.users = 1500
com.xceptance.xlt.loadtests.TGuestOrder.arrivalRate = 0m/0 10m/1000 30m/1000 40m/2000 60m/2000 70m/4000 90m/4000 100m/8000 120m/8000 130m/16000 150m/16000

com.xceptance.xlt.loadtests.TOrder.users = 1500
com.xceptance.xlt.loadtests.TOrder.arrivalRate = 0m/0 10m/1000 30m/1000 40m/2000 60m/2000 70m/4000 90m/4000 100m/8000 120m/8000 130m/16000 150m/16000

com.xceptance.xlt.loadtests.TRegister.users = 500
com.xceptance.xlt.loadtests.TRegister.arrivalRate = 0m/0 10m/1000 30m/1000 40m/2000 60m/2000 70m/4000 90m/4000 100m/8000 120m/8000 130m/16000 150m/16000

com.xceptance.xlt.loadtests.TSearch.users = 1000
com.xceptance.xlt.loadtests.TSearch.arrivalRate = 0m/0 10m/2400 30m/2400 40m/4800 60m/4800 70m/9600 90m/9600 100m/19200 120m/19200 130m/38400 150m/38400




