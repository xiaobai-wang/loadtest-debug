################################################################################
#
# Load Test Profile Configuration
#
# Define the load test cases to be run in parallel by the XLT agents.
#
# Format:
#
#   com.xceptance.xlt.loadtests.<testID>.<setting> = <value>
#
# For "<testID>" use any proper name. The supported values for "<setting>" are:
#
#   class ................. the test class name
#   users ................. the number of threads that run the test in parallel (REQUIRED)
#   iterations ............ the number of iterations per thread
#   arrivalRate ........... the number of transactions per hour
#   initialDelay .......... the number of seconds to wait at the beginning
#   warmUpPeriod .......... the number of seconds to run without performing measurements
#   measurementPeriod ..... the number of seconds to perform measurements (REQUIRED)
#   shutdownPeriod ........ the number of seconds to continue without performing measurements
#   rampUpInitialValue .... the initial value to start with when ramping up the load parameter
#   rampUpPeriod .......... the time period to steadily increase the load parameter
#   rampUpSteadyPeriod .... the time period between ramp-up steps
#   rampUpStepSize ........ the value to step-wise increase the load parameter during ramp-up
#   loadFactor ............ the factor to apply to users (and arrivalRate if defined)
#   clientPerformanceTest . whether this test should be run as client-side performance test
#
# The "arrivalRate" value influences the way the load is generated. If omitted,
# the system generates a constant load based on the number of concurrent users.
# If specified, the system generates load with a cluster-wide constant arrival
# rate. In the latter case, the maximum load is limited by the number of
# concurrent users. Note that an arrival rate is only supported for
# non-iteration based load tests.
#
# The following figure shows the relationship between the various settings:
#
#     : initialDelay :   warmUpPeriod   : measurementPeriod : shutdownPeriod :	
#     :              :                  :                   :                :
#     /\             :                  :                   :                :
#   L |              :                  :                   :                :
#   o |              :                  :                   :                :
#   a |              :                **************************************** 
#   d |              :            ****:
#     |              :        ****    :
#     |              :    ****        :
#     |              :****            :
#     +--------------*----------------------------------------------------------->
#     :              :                :                                      Time
#     : initialDelay :  rampUpPeriod  :
#
# The "warmUpPeriod" is the time we will give the load to level out before
# taking measurements, and it starts directly after the "initialDelay". This is
# done to minimize discrepancies that could be caused by applications and other
# systems starting up and not yet operating at an optimal level. Once this time
# has elapsed, the stable load will be measured during the "measurementPeriod".
# A "shutdownPeriod" can be set in which the users can orderly finish their last
# transaction.
#
# The "rampUpPeriod" setting is independent of the "warmUpPeriod", 
# "measurementPeriod", and "shutdownPeriod" settings and dictates the time that
# it will take for the load parameter to increase to 100% after the initial
# delay. As an alternative there is the "rampUpSteadyPeriod" that describes the
# period of a single step. The "rampUpPeriod" and the "rampUpSteadyPeriod" are 
# mutually exclusive. Note that the ramp-up settings are applied to the arrival
# rate load parameter if an arrival rate is specified, otherwise to the user 
# count load parameter.
#
# All time period values can be specified in one of the following formats:
#   - total number of seconds
#     examples: '1234s' or '1234'
#   - natural style
#     examples: '0h 12m 0s', '0h 12m', '12m 0s' or '12m'
#   - digit style
#     examples: '1:23', '01:23', '0:1:23' or '0:01:23' 
#
################################################################################

## The list of active test cases.
com.xceptance.xlt.loadtests = TAddToCart TBrowse TCheckout TGuestCheckout TGuestOrder TOrder TRegister TSearch 
#com.xceptance.xlt.loadtests = TVisit

# Optional extra test cases 
# TMultiThreadedPunch TGuestOrderWithMultipleCheckouts TSimpleURL TSingleProductOrder

## The default load test settings for all test cases. These global settings may
## be overridden by test case specific values. See below.
#com.xceptance.xlt.loadtests.default.rampUpPeriod = 15m
#com.xceptance.xlt.loadtests.default.measurementPeriod = 4h 15m
#com.xceptance.xlt.loadtests.default.shutdownPeriod = 5m

#com.xceptance.xlt.loadtests.default.rampUpPeriod = 10m
com.xceptance.xlt.loadtests.default.measurementPeriod = 150m
#com.xceptance.xlt.loadtests.default.shutdownPeriod = 2m

#com.xceptance.xlt.loadtests.default.rampUpPeriod = 1m
#com.xceptance.xlt.loadtests.default.measurementPeriod = 6m
#com.xceptance.xlt.loadtests.default.shutdownPeriod = 1m

#com.xceptance.xlt.loadtests.default.users = 5
#com.xceptance.xlt.loadtests.default.iterations = 100
#com.xceptance.xlt.loadtests.default.arrivalRate = 3600
#com.xceptance.xlt.loadtests.default.initialDelay = 0
#com.xceptance.xlt.loadtests.default.warmUpPeriod = 30s
#com.xceptance.xlt.loadtests.default.rampUpInitialValue = 1
#com.xceptance.xlt.loadtests.default.rampUpSteadyPeriod = 1s
#com.xceptance.xlt.loadtests.default.rampUpStepSize = 1
com.xceptance.xlt.loadtests.default.loadFactor = 1.0

# think time
com.xceptance.xlt.thinktime.action = 5000
com.xceptance.xlt.thinktime.action.deviation = 2000

#######################################################################################

## DW vertical scaling load testing --> 10k visits per hour - Load Distribution

# General Site Activity - 80% 10k vph  (8,000 vph)
# 20% abandoned checkouts  [1600 per hour with 50% Guest, 50% Registered]
# 15% abandoned carts  [1200 per hour]
# 30% browse  [2400 per hour]
# 30% search  [2400 per hour]
# 5% user registration [400 per hour]

# Conversion\Order Creation - 20% 10k vph  (2,000)
# 100% order creation [2000 per hour with 50% Guest, 50% Registered]

#-----------------------------
##INCREMENTAL INCREASING LOAD DESCRIPTION - FEEDBACK BASED LOAD ##
#Description:  incremental increasing feedback load (arrivalRate) up to 80k VPH.  [*NOTE: agent load servers seem to hit cpu threshold when ramping up from step 3 to step 4.  max users seem to be around the 1000vu point]

#STEP1 - 10k VPH
#STEP2 - 20k VPH
#STEP3 - 40k VPH
#STEP4 - 80k VPH

#Each Step has 10min Ramp Up and 20min Steady State
#Run duration (com.xceptance.xlt.loadtests.default.measurementPeriod) should be set to 30 x (num of steps)
#-----------------------------
#-----------------------------
##INCREMENTAL INCREASING LOAD DESCRIPTION - NON-FEEDBACK BASED LOAD  [APPROX EQUIVALENT TO ABOVE FEEDBACK LOAD BASED ON RUN DATA]##
#Description:  increasing incrementally non-feeback to ruffly equivalent to just about failure point in the incremental increasing feedback load with 4 steps up to 80k VPH
#**NOTE:  1000vu cpu cap on agent load servers was due to com.xceptance.xlt.javaScriptEnabled parameter set to true.  this dramatically increases agent server cpu load

#STEP1 - 250 users
#STEP2 - 500 users
#STEP3 - 750 users
#STEP4 - 1000 users

#Each Step has 10min Ramp Up and 20min Steady State
#Run duration (com.xceptance.xlt.loadtests.default.measurementPeriod) should be set to 30 x (num of steps)
#-----------------------------
#-----------------------------
##INCREMENTAL INCREASING LOAD DESCRIPTION - NON-FEEDBACK BASED LOAD [HIGH]##
#Description:  increasing incrementally non-feeback to greater than 1000 users (which seems to be load at which agent servers > 60% cpu and get into high gc)
#**NOTE:  1000vu cpu cap on agent load servers was due to com.xceptance.xlt.javaScriptEnabled parameter set to true.  this dramatically increases agent server cpu load

#STEP1 - 500 users
#STEP2 - 1000 users
#STEP3 - 1500 users
#STEP4 - 2000 users

#Each Step has 10min Ramp Up and 20min Steady State
#Run duration (com.xceptance.xlt.loadtests.default.measurementPeriod) should be set to 30 x (num of steps)
#-----------------------------
#-----------------------------
##INCREMENTAL INCREASING LOAD DESCRIPTION - NON-FEEDBACK BASED LOAD [VERY HIGH]##
#Description:  increasing incrementally non-feeback up to 5000 users which should be close to peak acceptable load generator cpu w/o the js enabled
#**NOTE:  com.xceptance.xlt.javaScriptEnabled parameter set to false

#STEP1 - 1000 users
#STEP2 - 2000 users
#STEP3 - 3000 users
#STEP4 - 4000 users
#STEP5 - 5000 users

#Each Step has 10min Ramp Up and 20min Steady State
#Run duration (com.xceptance.xlt.loadtests.default.measurementPeriod) should be set to 30 x (num of steps)
#-----------------------------
#######################################################################################


##INCREMENTAL INCREASING LOAD DESCRIPTION - NON-FEEDBACK BASED LOAD  [APPROX EQUIVALENT TO ABOVE FEEDBACK LOAD BASED ON RUN DATA]##
#STEP1 - 1000 users
#STEP2 - 2000 users
#STEP3 - 3000 users
#STEP4 - 4000 users
#STEP5 - 5000 users

com.xceptance.xlt.loadtests.TAddToCart.users = 0m/0 10m/120 30m/120 40m/240 60m/240 70m/360 90m/360 100m/480 120m/480 130m/600 150m/600
#com.xceptance.xlt.loadtests.TAddToCart.arrivalRate = 

com.xceptance.xlt.loadtests.TBrowse.users = 0m/0 10m/240 30m/240 40m/480 60m/480 70m/720 90m/720 100m/960 120m/960 130m/1200 150m/1200
#com.xceptance.xlt.loadtests.TBrowse.arrivalRate = 

com.xceptance.xlt.loadtests.TCheckout.users =0m/0 10m/80 30m/80 40m/160 60m/160 70m/240 90m/240 100m/320 120m/320 130m/400 150m/400
#com.xceptance.xlt.loadtests.TCheckout.arrivalRate = 

com.xceptance.xlt.loadtests.TGuestCheckout.users = 0m/0 10m/80 30m/80 40m/160 60m/160 70m/240 90m/240 100m/320 120m/320 130m/400 150m/400
#com.xceptance.xlt.loadtests.TGuestCheckout.arrivalRate = 

com.xceptance.xlt.loadtests.TGuestOrder.users = 0m/0 10m/100 30m/100 40m/200 60m/200 70m/300 90m/300 100m/400 120m/400 130m/500 150m/500
#com.xceptance.xlt.loadtests.TGuestOrder.arrivalRate = 

com.xceptance.xlt.loadtests.TOrder.users = 0m/0 10m/100 30m/100 40m/200 60m/200 70m/300 90m/300 100m/400 120m/400 130m/500 150m/500
#com.xceptance.xlt.loadtests.TOrder.arrivalRate = 

com.xceptance.xlt.loadtests.TRegister.users = 0m/0 10m/40 30m/40 40m/80 60m/80 70m/120 90m/120 100m/160 120m/160 130m/200 150m/200
#com.xceptance.xlt.loadtests.TRegister.arrivalRate = 

com.xceptance.xlt.loadtests.TSearch.users = 0m/0 10m/240 30m/240 40m/480 60m/480 70m/720 90m/720 100m/960 120m/960 130m/1200 150m/1200
#com.xceptance.xlt.loadtests.TSearch.arrivalRate = 




