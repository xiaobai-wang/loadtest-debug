################################################################################
#
# Test Run Specific Settings
#
# Use this section to configure an (optional) file which contains the settings
# specific to a certain load test run. This is useful to externalize the
# definition of a certain load profile or a set of test conditions. This way,
# many of these configurations can be defined and prepared in advance and used
# as needed. For example, to switch to another load profile, just name the
# respective properties file.
#
################################################################################

## The file with test run specific settings.
com.xceptance.xlt.testPropertiesFile = customCodeLoadTest.properties

################################################################################
#
# Test Case Mapping
#
# Maps the test case class onto a load test name. The load test name will be
# referenced later in the load test configuration. You can map the same class
# to multiple load test names if needed.
#
################################################################################

com.xceptance.xlt.loadtests.TVisit.class = com.demandware.xlt.tests.TVisit
com.xceptance.xlt.loadtests.TSearch.class = com.demandware.xlt.tests.TSearch
com.xceptance.xlt.loadtests.TBrowse.class = com.demandware.xlt.tests.TBrowse
com.xceptance.xlt.loadtests.TAddToCart.class = com.demandware.xlt.tests.TAddToCart
com.xceptance.xlt.loadtests.TGuestCheckout.class = com.demandware.xlt.tests.TGuestCheckout
com.xceptance.xlt.loadtests.TGuestOrder.class = com.demandware.xlt.tests.TGuestOrder
com.xceptance.xlt.loadtests.TRegister.class = com.demandware.xlt.tests.TRegister
com.xceptance.xlt.loadtests.TCheckout.class = com.demandware.xlt.tests.TCheckout
com.xceptance.xlt.loadtests.TOrder.class = com.demandware.xlt.tests.TOrder
com.xceptance.xlt.loadtests.TCrawler.class = com.demandware.xlt.tests.TCrawler
com.xceptance.xlt.loadtests.TStoreLocator.class = com.demandware.xlt.tests.TStoreLocator

# Special test cases for detailed investigations or special scenarios
com.xceptance.xlt.loadtests.TSingleProductOrder.class = com.demandware.xlt.extra.tests.TSingleProductOrder
com.xceptance.xlt.loadtests.TGuestOrderWithMultipleCheckouts.class = com.demandware.xlt.extra.tests.TGuestOrderWithMultipleCheckouts
com.xceptance.xlt.loadtests.TMultiThreadedPunch.class = com.demandware.xlt.extra.tests.TMultiThreadedPunch
com.xceptance.xlt.loadtests.TSimpleURL.class = com.demandware.xlt.extra.tests.TSimpleURL
com.xceptance.xlt.loadtests.TReturningAddToCart.class = com.demandware.xlt.extra.tests.TReturningAddToCart


#####################################################################
#
# Real-Time Reporting Settings
#
#####################################################################

## Whether real-time reporting is enabled (default: false).
xlt.reporting.enabled = true

## The text to be prepended to the name of any reported metric (default: "").
## Use this prefix to create a separate metrics branch for each XLT load test
## project in your reporting system.
xlt.reporting.metricNamePrefix = xlt.vertScalingPrj.

## The Graphite Carbon server's host and port (default: localhost/2003).
xlt.reporting.graphite.host = http://52.7.113.145/
xlt.reporting.graphite.port = 2003


################################################################################
#
# Test Specific Settings
#
# Prefix test case specific settings with the test class name.
#
################################################################################

##### General Settings (we refer to them by full property name) #####

# The site's common landing page.
#start.url = http://development-loaner3201-dw.demandware.net/on/demandware.store/Sites-SiteGenesis-Site
#start.url = http://production-loaner3201-dw.demandware.net/on/demandware.store/Sites-SiteGenesis-Site
#start.url = http://dgoshey-inside-na03-dw.demandware.net/on/demandware.store/Sites-SiteGenesis-Site
start.url = http://shop.gopro.com
#start.url = http://staging-web-gopro.demandware.net/on/demandware.store/Sites-GoPro-Site

# A specific product's URL. Used for testcase 'TSingleProductOrder'.
singleOrder.products.directUrl = 
# For the single product order scenario, we use that to adjust the amount if line items in the
# cart, will be always the same. Requires an suitable ecom settings to have multi-line items
singleOrder.products.addToCartNumber=2

# The site's basic credentials.
com.xceptance.xlt.auth.userName = storefront
com.xceptance.xlt.auth.password = gpmtbcITW9

# Load only resources belonging to the sites domain. This filter configuration will override the default properties.
#com.xceptance.xlt.http.filter.include = ^https?://
com.xceptance.xlt.http.filter.include =
com.xceptance.xlt.http.filter.exclude =

# Make the analytics call?
load.analytics = true

# simulation of impatient user who will just hit refresh if the server is slow
# this is mainly for special error situation testing
# fires same request again after the normal timeout has hit
# retry.execute.ontimeout = 0

# Make the Resources-Load call?
# If set to 'true' the scripts will make a Resources-Load request to get the 'app.resources' script.
# Otherwise ('false') the 'app.resources' script content is assumed to be already in the page.
load.resources-load = false

# Probability to start browsing at a top category instead of a sub category link.
# Default is 100.
browsing.topCategoryProbability = 100

# Probability to refine the result's category.
browsing.categoryRefinementProbability = 0 

# Min/max number of products to browse
#browsing.products.min = 1
#browsing.products.max = 2
# Min/max number of products to search
#search.products.min = 1
#search.products.max = 2
# Min/max number of products to add to cart
addToCart.products.min = 1
addToCart.products.max = 3

# General min/max number of products, if no specific number for browsing, search or addToCart is defined
products.min = 1
products.max = 3

# Special setup for more realistic distribution of cart sizes, basically a probability distribution
# No need that this is 100%, just define buckets with size/count, e.g. 1 cart item/10 times, 2 items/20 times etc.
#addToCart.products.distribution = 1/10 2/20 3/50 5/10

# Probability to sort the product results.
browsing.sortProbability = 20

# Probaility and min/max number of pagings on a product results page.
browsing.paging.probability = 30
browsing.paging.min = 1
browsing.paging.max = 3

# indicates whether infinite scroll should be used instead of paging or not
browsing.infinitescroll = false

# Probability to change the number of displayed items per page.
browsing.changeItemsPerPageProbability = 20

# Refine product results attributes.
# Define the probability as well as the min/max number of refinements.
browsing.refinement.probability = 20
browsing.refinement.min = 1
browsing.refinement.max = 2

# Skip brand refinements optionally
browsing.refinement.byBrand=false

# Probability of using the quick view instead of the details view.
browsing.quickviewProbability = 0

# Probability to generate a search miss.
search.noHitsProbability = 0

# Load search suggestions?
# If not set the default is 'true'
search.loadSuggestions = true

# Specifies the number of store searches.
storeSearch.min = 1
storeSearch.max = 10

# Some radii for the zipcode store search (needs to be whitespace {" "} separated).
storeSearch.radii  = 15.0 100.0 300.0 999999.0

# A whitespace separated list of country codes, which ensures that are stores located in that country
# and performing a store locator search results in a hit.
storeSearch.storeLocations = US DE

# A list of zipcodes to search for.
storeSearch.zipcodes = 01109 01843 02118 02141 02171 02108 01801 06605 02903 04101 03104

# Probability to reuse an existing account instead of creating a new one.
account.pool.size = 500
account.reusageProbability = 20

# Permits the separation of the account pools by start url to allow testing across sites during
# the very same load test. Otherwise the accounts would be used where they have not been created before.
# Host and path are the key, protocol and parameters are ignored.
account.pool.siteSeparated = true

#
# address
#
# If the checkout should use a specific address (or two addresses), they can be
# configured here (primary and secondary address). Otherwise if the
# address.*.**** parameters are left empty, random street/town values will be
# used.
#

address.1.street = 6 Wall St
address.1.town = Burlington
address.1.zipcode = 01803-4758
address.1.countrycode = US
address.1.statecode = MA
address.1.phone = 333-333-3333

#address.2.street = 5 Wall St
#address.2.town = Burlington
#address.2.zipcode = 01803-4758
#address.2.countrycode = US
#address.2.statecode = MA
#address.2.phone = 333-333-3333

# The language used on the page
# This value indicates the used language list below 
test.language = en-US
test.language.en-US.product.availabilityMsg = In Stock
test.language.en-US.cart.remove = Remove
#test.language.de-DE.product.availabilityMsg = Auf Lager
#test.language.de-DE.cart.remove = Löschen

#
# Payment Limitations
#  
# A Usual Case is, that the payment provider blocks an specific range of order totals to be fulfilled.
# Important: Keep in mind, that this value only takes the product price into account so, taxes and shipping costs 
# will raise the totals. So use a value below the real order limit to ensure additional costs will be handled correctly.
#
# If the limit is something like "only Orders below $1000" set
#   test.paymentBlocked.above = 900 
#
# if the limit is something like "no Orders between $1000 and $2000" set
# 
#   test.paymentBlocked.above = 900
#    test.paymentBlocked.below = 2000
# 
#

#test.paymentBlocked.above = 1000
#test.paymentBlocked.below = 2000

#
# Credit cards
#
# A credit card configuration starts with the key 'cc' followed by serial that
# starts at '0' and increases steadily with each new credit card configuration.
# A credit card configuration has the attributes 'type','number','cvn','year',
# 'month','owner' and 'issuenr'.
#
# The minimum requirements for a credit card configuration are type and number.
#
# If no value is set for year, month, CVN, or owner values will be generated
# automatically:
# year - very next year from NOW
# month - random
# cvn - 3 digit number
# owner - randomly taken from list of names
# issuenr - no value, silently skipped
#

cc.0.type = Visa
cc.0.number = 4111111111111111
cc.0.cvn = 123
cc.0.year = 2017
cc.0.month = 2
cc.0.owner = John Doe
cc.0.issuenr = 123

#cc.1.type = Visa
#cc.1.number = 4012888888881881
#cc.1.cvn = 123
#
#cc.2.type = Visa
#cc.2.number = 4222222222222 
#cc.2.cvn = 123
#
#cc.3.type = Amex
#cc.3.number = 378282246310005
#cc.3.cvn = 1234
#
#cc.4.type = Amex
#cc.4.number = 371449635398431
#cc.4.cvn = 1234
#
#cc.5.type = Master
#cc.5.number = 5555555555554444
#cc.5.cvn = 123
#
#cc.6.type = Master
#cc.6.number = 5105105105105100
#cc.6.cvn = 123

#cc.7.type = Discover
#cc.7.number = 6011111111111117
#cc.7.cvn = 123
#
#cc.8.type = Discover
#cc.8.number = 6011000990139424
#cc.8.cvn = 123

#
# PayPal
#
# configure paypal accounts in config/data/paypal.csv
#

payment.paypal.probability = 0

################################################################################
#
# Crawler
#
################################################################################

## URL filter. Separate several URLs by space
## Default: no filters
#crawler.includeURLs = 
#crawler.excludeURLs = 

## Max nurmber of pages to crawl. Stop crawling if that number is reached.
## Default: unlimited
#crawler.maxPages = 1000

## Max time to run. Stop if maximum crawler runtime is reached. Runtime limit
## must be 1 sec or higher if set. Otherwise limitation will be switched off.
## Number AND unit required, such as 10m, 30s, 1h OR combination like 3h2m1s.
## Default: no limit
#crawler.maxRuntime = 10m

## Max depth of recursion
## Default: 1 (don't crawl into depth at all)
#crawler.maxDepth = 2

## Add some dynamic parameter to the URLs to crawl to disable server side caching
## Default: false
#crawler.noCache = true

## Drop Session
## * always
## * never
## * every <INTERVAL><UNIT>
## Unit might by a time unit such as h,m,s (meaning hour, minute, and second) 
## OR unit might be "p" for pages
##
## Examples:
## crawler.dropSession = always
## crawler.dropSession = never
## crawler.dropSession = every 1h30m
## crawler.dropSession = every 3p
##
## Default: do not touch sessions
#crawler.dropSession = 

## Text Filters
## Add as many text filters as needed. Take care the text filter ID
## is unique for the current filter. The ID doesn't need to be a number
## necessarily. 
## Default: no filters

## Disallowed texts
#crawler.disallowText.1 = 
#crawler.disallowText.2 =
#crawler.disallowText.3 =

## Required texts
#crawler.requireText.1 = 
#crawler.requireText.2 = 
#crawler.requireText.3 = 


################################################################################
#
# Single url load testing
#
################################################################################
com.demandware.xlt.tests.extra.TSimpleURL.url=http://mytestfoo.com/en/electronics/ipod%20%26%20mp3%20players/apple%20ipod%20touch%20x0038/x0038-apple-ipod-touch.html#prefn1=portableAudioType&start=1&format=ajax&prefv1=0030
com.demandware.xlt.tests.extra.TSimpleURL.xpath=id('pdpMain')/h1[@class='product-name']
com.demandware.xlt.tests.extra.TSimpleURL.text=Apple iPod Touch x0038
com.demandware.xlt.tests.extra.TSimpleURL.iterations=10

################################################################################
#
# Punch the server!
#
################################################################################
com.demandware.xlt.tests.extra.TMultiThreadedPunch.url=http://mytestfoo.com/on/demandware.store/Sites-SiteGenesis-Site/en/Cart-AddProduct?format=ajax&dwopt_tomtom-one-130_gpsWarranty=004&Quantity=1&cartAction=add&pid=tomtom-one-130
com.demandware.xlt.tests.extra.TMultiThreadedPunch.xpath=//span[@class="mini-cart-total-label"]
com.demandware.xlt.tests.extra.TMultiThreadedPunch.text=Total: \\$[0-9]{1,}\\.[0-9]{2}
com.demandware.xlt.tests.extra.TMultiThreadedPunch.iterations=20
com.demandware.xlt.tests.extra.TMultiThreadedPunch.thread.count=25

################################################################################
#
# Project-Specific Report Generator Settings
#
# In order to reduce the list of requests in the report, the values of different
# requests can be merged together. You may specify one or more merge rules as
# outlined below:
#
#   com.xceptance.xlt.reportgenerator.requestMergeRules.<num>.<param> = <value>
#
# The rules are sorted numerically based on <num> and are applied in ascending
# order.
#
# The supported values for "<param>" are:
#
#   newName .................. new request name (required)
#
#   namePattern [n] .......... reg-ex defining a matching request name
#   transactionPattern [t] ... reg-ex defining a matching transaction name
#   agentPattern [a] ......... reg-ex defining a matching agent name
#   contentTypePattern [c] ... reg-ex defining a matching response content type
#   statusCodePattern [s] .... reg-ex defining a matching status code
#   urlPattern [u] ........... reg-ex defining a matching request URL
#   runTimeRanges [r] ........ list of run time segment boundaries
#
#   stopOnMatch .............. whether or not to process the next rule even if 
#                              the current rule applied (defaults to true)
#
# At least one of namePattern, transactionPattern, agentPattern, 
# contentTypePattern, statusCodePattern, urlPattern or runTimeRanges must be
# specified. If more than one pattern is given, all given patterns must
# match. 
#
# Note that newName may contain placeholders, which are replaced with the 
# specified capturing group from the respective pattern. The placeholder  
# format is as follows: {<category>:<capturingGroupIndex>}, where <category> is 
# the type code of the respective pattern (given in brackets above) and 
# <capturingGroupIndex> denotes the respective capturing group in the selected
# pattern (does not apply to runTimeRanges). 
#
# Excluding instead of Including
#
#   com.xceptance.xlt.reportgenerator.requestMergeRules.<num>.<param>.exclude = <value>
#
# All requests that match the exclude pattern will not be selected. For example, 
# to create a bucket for all non-JavaScript resources, you would setup a rule like that.
#
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.newName = {n:0} NonJS
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.namePattern = .+
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.contentTypePattern.exclude = javascript
#   com.xceptance.xlt.reportgenerator.requestMergeRules.1.stopOnMatch = false
# 
# Please note that an include pattern as well as an exclude pattern can be specified for 
# a pattern type at the same time. In this case, a request is selected if and only if it 
# matches the include pattern, but does not match the exclude pattern.
#
################################################################################

## Summarize Analysis Tracking
com.xceptance.xlt.reportgenerator.requestMergeRules.10.newName = {u:1}
com.xceptance.xlt.reportgenerator.requestMergeRules.10.urlPattern = /(__Analytics-Tracking)\\?
com.xceptance.xlt.reportgenerator.requestMergeRules.10.stopOnMatch = true

## First, we eliminate the sub-request naming pattern, because we do not need
## that at the moment. This turns all "name.1" or "name.1.1" and so on into "name".
com.xceptance.xlt.reportgenerator.requestMergeRules.20.newName = {n:1}
com.xceptance.xlt.reportgenerator.requestMergeRules.20.namePattern = ^([^\\.]*)(\\.[0-9]+)+$
com.xceptance.xlt.reportgenerator.requestMergeRules.20.stopOnMatch = false

## All requests with URLs ending with ".js" are grouped under "<name> JS".
com.xceptance.xlt.reportgenerator.requestMergeRules.30.newName = {n:0} JS
com.xceptance.xlt.reportgenerator.requestMergeRules.30.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.30.urlPattern = \\.js$
com.xceptance.xlt.reportgenerator.requestMergeRules.30.stopOnMatch = false

## All requests with URLs ending with common image file extension are grouped
## under "<name> Images".
com.xceptance.xlt.reportgenerator.requestMergeRules.40.newName = {n:0} Images  
com.xceptance.xlt.reportgenerator.requestMergeRules.40.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.40.urlPattern = \\.(gif|png|jpg|ico)$
com.xceptance.xlt.reportgenerator.requestMergeRules.40.stopOnMatch = false

## All requests with URLs ending with ".css" are grouped under "<name> CSS".
com.xceptance.xlt.reportgenerator.requestMergeRules.50.newName = {n:0} CSS
com.xceptance.xlt.reportgenerator.requestMergeRules.50.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.50.urlPattern = \\.css$
com.xceptance.xlt.reportgenerator.requestMergeRules.50.stopOnMatch = false

# Do a split by pipeline name
com.xceptance.xlt.reportgenerator.requestMergeRules.60.newName = {n:0} ({u:1})
com.xceptance.xlt.reportgenerator.requestMergeRules.60.namePattern = [^.]+
com.xceptance.xlt.reportgenerator.requestMergeRules.60.urlPattern = -Site/[^/]+/([^/\\?]+).*
com.xceptance.xlt.reportgenerator.requestMergeRules.60.stopOnMatch = false

## Finally, append the response code to each request name. This way, statistics
## are calculated separately for each response code. So, fast 500 error 
## responses for instance will not influence the statistics for normal 200 
## responses.  
com.xceptance.xlt.reportgenerator.requestMergeRules.70.newName = {n:0} [{s:0}]  
com.xceptance.xlt.reportgenerator.requestMergeRules.70.namePattern = .*
com.xceptance.xlt.reportgenerator.requestMergeRules.70.statusCodePattern = 30[0-9]
com.xceptance.xlt.reportgenerator.requestMergeRules.70.stopOnMatch = false

## Split by parameter 'size'
#com.xceptance.xlt.reportgenerator.requestMergeRules.80.newName = {n:0} ({u:1})
#com.xceptance.xlt.reportgenerator.requestMergeRules.80.namePattern = [^.]+
#com.xceptance.xlt.reportgenerator.requestMergeRules.80.urlPattern = (sz=\d+)
#com.xceptance.xlt.reportgenerator.requestMergeRules.80.stopOnMatch = false

##
## Split by EC2 data center
## (requires knowledge of what agent ran at what data center)
##
## Split by data center (agent ac001-ac006 -> US-EAST)
#com.xceptance.xlt.reportgenerator.requestMergeRules.81.newName = {n:0} <US-EAST>
#com.xceptance.xlt.reportgenerator.requestMergeRules.81.namePattern = .*
#com.xceptance.xlt.reportgenerator.requestMergeRules.81.agentPattern = ac00[1-6]
#com.xceptance.xlt.reportgenerator.requestMergeRules.81.stopOnMatch = false
## Split by data center (agent ac007-ac012 -> US-WEST-1)
#com.xceptance.xlt.reportgenerator.requestMergeRules.82.newName = {n:0} <US-WEST-1>
#com.xceptance.xlt.reportgenerator.requestMergeRules.82.namePattern = .*
#com.xceptance.xlt.reportgenerator.requestMergeRules.82.agentPattern = ac0(0[7-9]|1[0-2])
#com.xceptance.xlt.reportgenerator.requestMergeRules.82.stopOnMatch = false
## Split by data center (agent ac013-ac018 -> US-WEST-2)
#com.xceptance.xlt.reportgenerator.requestMergeRules.83.newName = {n:0} <US-WEST-2>
#com.xceptance.xlt.reportgenerator.requestMergeRules.83.namePattern = .*
#com.xceptance.xlt.reportgenerator.requestMergeRules.83.agentPattern = ac01[3-8]
#com.xceptance.xlt.reportgenerator.requestMergeRules.83.stopOnMatch = false

## Put the server name into the request name
#com.xceptance.xlt.reportgenerator.requestMergeRules.90.newName = {n:0} <{u:1}>
#com.xceptance.xlt.reportgenerator.requestMergeRules.90.namePattern = [^.]+
#com.xceptance.xlt.reportgenerator.requestMergeRules.90.urlPattern = ^http[s]?://([^/?]+)-
#com.xceptance.xlt.reportgenerator.requestMergeRules.90.stopOnMatch = false